
name: Release

on:
  push:
    branches:
      - master
    paths:
      - 'Cargo.toml'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform a dry run without publishing'
        required: false
        default: 'false'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Create tag when version is bumped
  create-tag:
    name: Create Version Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
    outputs:
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION does not exist"
          fi
      
      - name: Create and push tag
        id: create_tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
          echo "tag_created=true" >> $GITHUB_OUTPUT
          echo "✅ Created and pushed tag v$VERSION"
      
      - name: Skip tag creation
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "⏭️  Tag v$VERSION already exists, skipping release"
          echo "tag_created=false" >> $GITHUB_OUTPUT

  # Pre-flight checks
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: |
      always() && 
      (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped') &&
      (
        (github.event_name == 'push' && github.ref_type == 'tag') ||
        (github.event_name == 'push' && needs.create-tag.outputs.tag_created == 'true') ||
        github.event_name == 'workflow_dispatch'
      )
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Extract version information
        id: version
        run: |
          VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "push" ]; then
            TAG=${GITHUB_REF#refs/tags/v}
          else
            TAG="dry-run"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          echo "Cargo.toml version: $VERSION"
          echo "Git tag: $TAG"
      
      - name: Verify version matches tag
        if: github.event_name == 'push'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="${{ steps.version.outputs.tag }}"
          
          if [ "$VERSION" != "$TAG" ]; then
            echo "❌ Version mismatch!"
            echo "Cargo.toml version: $VERSION"
            echo "Git tag version: $TAG"
            exit 1
          fi
          echo "✅ Version matches tag: $VERSION"
      
      - name: Check for changelog entry
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [ -f "CHANGELOG.md" ]; then
            if ! grep -q "## \[$VERSION\]" CHANGELOG.md && ! grep -q "## $VERSION" CHANGELOG.md; then
              echo "⚠️  Warning: No changelog entry found for version $VERSION"
              echo "Consider adding a changelog entry before release"
            else
              echo "✅ Changelog entry found for version $VERSION"
            fi
          else
            echo "⚠️  Warning: CHANGELOG.md not found"
          fi

  # Run comprehensive tests
  test:
    name: Test Suite
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            rust: 1.70.0  # MSRV (Minimum Supported Rust Version)
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Regenerate Cargo.lock for older Rust versions
        if: matrix.rust == '1.70.0'
        run: |
          rm -f Cargo.lock
          cargo generate-lockfile
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --all-features --all-targets -- -D warnings
      
      - name: Build
        run: cargo build --all-features --verbose
      
      - name: Run tests
        run: cargo test --all-features --verbose
      
      - name: Run tests (no default features)
        run: cargo test --no-default-features --verbose
      
      - name: Run doc tests
        run: cargo test --doc --all-features
      
      - name: Build documentation
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: -D warnings

  # Run benchmarks to ensure no performance regression
  benchmark:
    name: Performance Benchmarks
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Run benchmarks
        run: cargo bench --all-features -- --output-format bencher | tee benchmark-results.txt
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.txt

  # Security audit
  security:
    name: Security Audit
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    needs: [validate, test, benchmark, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.dry_run == 'false'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      
      - name: Verify package
        run: cargo package --list
      
      - name: Dry run publish
        if: github.event.inputs.dry_run == 'true'
        run: cargo publish --dry-run --all-features
      
      - name: Publish to crates.io
        if: github.event.inputs.dry_run != 'true'
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --all-features
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Wait for crates.io to update
        if: github.event.inputs.dry_run != 'true'
        run: sleep 30

  # Create GitHub Release
  github-release:
    name: Create GitHub Release
    needs: [validate, publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          if [ -f "CHANGELOG.md" ]; then
            # Extract the section for this version
            CHANGELOG=$(awk "/## \[$VERSION\]|## $VERSION/{flag=1; next} /## \[|## [0-9]/{flag=0} flag" CHANGELOG.md)
            
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="Release version $VERSION"
            fi
          else
            CHANGELOG="Release version $VERSION"
          fi
          
          # Save to file for multiline support
          echo "$CHANGELOG" > release-notes.txt
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          cat > full-release-notes.md << EOF
          # fastalloc v$VERSION
          
          ## What's Changed
          
          $(cat release-notes.txt)
          
          ## Installation
          
          Add this to your \`Cargo.toml\`:
          
          \`\`\`toml
          [dependencies]
          fastalloc = "$VERSION"
          \`\`\`
          
          ## Documentation
          
          - [crates.io](https://crates.io/crates/fastalloc)
          - [docs.rs](https://docs.rs/fastalloc/$VERSION)
          
          ## Checksums
          
          \`\`\`
          $(cargo package --list | sha256sum)
          \`\`\`
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body_path: full-release-notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload package to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          files: |
            target/package/fastalloc-${{ needs.validate.outputs.version }}.crate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    name: Notify Release Status
    needs: [validate, test, benchmark, security, publish, github-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.publish.result }}" = "success" ] && [ "${{ needs.github-release.result }}" = "success" ]; then
            echo "✅ Release v${{ needs.validate.outputs.version }} completed successfully!"
          else
            echo "❌ Release failed. Check the logs for details."
            exit 1
          fi
